// Generated by view binder compiler. Do not edit!
package com.farm.friendly.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.farm.friendly.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogCustomBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnCancel;

  @NonNull
  public final Button btnSubmit;

  @NonNull
  public final TextView result;

  @NonNull
  public final Spinner spinCntry;

  @NonNull
  public final Spinner spinCrop;

  @NonNull
  public final EditText txtPest;

  @NonNull
  public final EditText txtRain;

  @NonNull
  public final EditText txtTemp;

  private DialogCustomBinding(@NonNull LinearLayout rootView, @NonNull Button btnCancel,
      @NonNull Button btnSubmit, @NonNull TextView result, @NonNull Spinner spinCntry,
      @NonNull Spinner spinCrop, @NonNull EditText txtPest, @NonNull EditText txtRain,
      @NonNull EditText txtTemp) {
    this.rootView = rootView;
    this.btnCancel = btnCancel;
    this.btnSubmit = btnSubmit;
    this.result = result;
    this.spinCntry = spinCntry;
    this.spinCrop = spinCrop;
    this.txtPest = txtPest;
    this.txtRain = txtRain;
    this.txtTemp = txtTemp;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogCustomBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogCustomBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_custom, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogCustomBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnCancel;
      Button btnCancel = ViewBindings.findChildViewById(rootView, id);
      if (btnCancel == null) {
        break missingId;
      }

      id = R.id.btnSubmit;
      Button btnSubmit = ViewBindings.findChildViewById(rootView, id);
      if (btnSubmit == null) {
        break missingId;
      }

      id = R.id.result;
      TextView result = ViewBindings.findChildViewById(rootView, id);
      if (result == null) {
        break missingId;
      }

      id = R.id.spinCntry;
      Spinner spinCntry = ViewBindings.findChildViewById(rootView, id);
      if (spinCntry == null) {
        break missingId;
      }

      id = R.id.spinCrop;
      Spinner spinCrop = ViewBindings.findChildViewById(rootView, id);
      if (spinCrop == null) {
        break missingId;
      }

      id = R.id.txtPest;
      EditText txtPest = ViewBindings.findChildViewById(rootView, id);
      if (txtPest == null) {
        break missingId;
      }

      id = R.id.txtRain;
      EditText txtRain = ViewBindings.findChildViewById(rootView, id);
      if (txtRain == null) {
        break missingId;
      }

      id = R.id.txtTemp;
      EditText txtTemp = ViewBindings.findChildViewById(rootView, id);
      if (txtTemp == null) {
        break missingId;
      }

      return new DialogCustomBinding((LinearLayout) rootView, btnCancel, btnSubmit, result,
          spinCntry, spinCrop, txtPest, txtRain, txtTemp);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
